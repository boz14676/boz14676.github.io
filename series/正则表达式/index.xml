<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>正则表达式 on Taylor&#39;s Blog</title>
    <link>http://boz14676.github.io/series/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
    <description>Recent content in 正则表达式 on Taylor&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 08 Nov 2020 11:08:00 +0800</lastBuildDate><atom:link href="http://boz14676.github.io/series/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://boz14676.github.io/posts/learning_regexp_01/</link>
      <pubDate>Sun, 08 Nov 2020 11:08:00 +0800</pubDate>
      
      <guid>http://boz14676.github.io/posts/learning_regexp_01/</guid>
      <description>《正则表达式必知必会》阅读笔记(上) 0. 介绍 《正则表达式必知必会》这本书非常简洁明了的介绍了正则表达式常见的应用场景，按部就班的让读者掌握正则表达式这个强大的工具。
本文在于简化书中的内容，抽取核心知识点，在保留书中举例学习的特色上进行整理总结。
《正则表达式必知必会》阅读笔记(上)希望通过下面的3个章节、10个例子让读者朋友们去理解正则表达式，以便愉快的使用这个强大的工具。本文阅读大概需要10分钟，如果你觉得正则表达式对你不可或缺请耐心读完它。
定义：正则表达式是一些用来匹配和处理文本的字符串，正则表达式是由正则表达式语言创建的。可以解决如下场景：
 将文件中 car 的单词找出来并替换，但包含 car 字符串的其他单词不在其中（如 scar、carry 等）。 将数据库检索出来的 URL 加入 &amp;lt;a&amp;gt; 标签，使其可点击。 检查用户提交的表单中的邮件地址是否合法。 以上的场景包含的两种情况也是正则表达式的两种基本用途，它们分别是搜索：查找特定的信息，替换：查找并编辑特定的信息。  关于正则表达式的几个事实：
 在使用正则表达式的时候，同一个问题会有多种解决方案，有的比较简单，有的比较快速，有的兼容性更好，有的功能更齐全。 掌握正则表达式的关键就是实践，实践，再实践。  1 匹配纯文本 例1： 1.1. 有多少个匹配结果 例1中匹配 my，找到了两个匹配结果。绝大数正则表达式引擎默认只返回第一个匹配结果，但可以通过特定标志匹配所有匹配结果，比如 JavaScript 中可以通过 g 标记返回一个包含所有匹配结果的数组。
1.2 字母大小写问题 另外正则表达式是区分字母大小写的，在 JavaScript 中可以通过 i 标记强制执行一次不区分字母大小写搜索。
2. 元字符 2.1 转义特殊字符 元字符是一些在正则表达式里有着特殊含义的字符。英文句号 . 是一个元字符，匹配任意一个单字符。左方括号 [ 也是一个元字符，标志一个字符集合的开始。因为元字符在正则表达式有特殊的含义，所以这些字符不能匹配它们本身。比如不能用 [ 匹配 [ 本身，. 匹配 . 本身。
例2： 例2中原本需要匹配 myArray[0]，但是没有匹配结果。因为 [0] 代表一个字符区间，只能匹配到字符 myArray0。修改如下即可完成匹配 myArray\[0\]。 所以如果想匹配元字符本身需要使用 \ 转义元字符对它们进行转义，以便让正则表达式知道 \.</description>
    </item>
    
  </channel>
</rss>
